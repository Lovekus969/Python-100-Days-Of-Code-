String Methods
Python has a set of built-in methods that you can use on strings.

1. capitalize()
      Definition :=>> Converts the first character of the string to uppercase and the rest to lowercase. Returns a new string (strings are immutable).

Time Complexity: O(n) — because it scans the entire string.
Space Complexity: O(n) — creates a new string.

2.casefold()
            Definition:=> Converts a string to lowercase in a more aggressive way than lower(), suitable for case-insensitive comparisons, including Unicode characters.

Time Complexity: O(n)
Space Complexity: O(n)

3.center(width, fillchar=' ')

            Definition:=>> Returns a new string of specified width with the original string centered. Fills extra spaces with the optional fillchar (default: space).

Time Complexity: O(n + width)
Space Complexity: O(width)

4.count(substring, start=0, end=len(string))

            Definition:=>> Returns the number of non-overlapping occurrences of substring in the string. Can specify start and end.

Time Complexity: O(n*m) in worst case (n = string length, m = substring length)
Space Complexity: O(1)

5.encode(encoding='utf-8', errors='strict')
            Definition:=>> Returns an encoded version of the string as a bytes object using the specified encoding (default: 'utf-8').

Time Complexity: O(n) — must process each character
Space Complexity: O(n) — creates a new bytes object

6. endswith(suffix, start=0, end=len(string))

            Definition:=>> Returns True if the string ends with the specified suffix, otherwise False. Can check a substring using start and end.

Time Complexity: O(k) — k = length of suffix
Space Complexity: O(1)

7. expandtabs(tabsize=8)

            Definition:=>> Returns a new string where all tab characters (\t) are replaced by spaces. Default tab size is 8, but can be customized.

Time Complexity: O(n) — scans entire string
Space Complexity: O(n) — creates new string

8. format(*args, **kwargs)

            Definition:=>> Returns a formatted string by inserting values into placeholders {}. Supports positional and keyword arguments.

Time Complexity: O(n) — scans the string once to replace placeholders
Space Complexity: O(n) — creates a new string
